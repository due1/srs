		-------------
		Deliverable 4
		-------------
		Eric Dubuis
		-------------
		December 4, 2016


Deliverable 4

* Introduction

	This document describes the tasks to be performed for, and the constituents
of, the Deliverable 4. Such a document would usually not exist in a real
project documentation. (Similar information would be found elsewhere, for
example, in the Iteration Plan document, however.)

		[Note:]	Do not edit or modify this document. This document is
				managed by your lecturer.


* Goals

	The goals for this sprint are similar as the ones for sprint 3:

	*	To organize a sprint in terms of product backlog, sprint backlog/tasks

			*	Product backlog organization

			*	Tasks and task allocations.

			*	Team collaboration.

			*	Working with Git (branches, team efforts, merging, ...)

	*	To deliver a well-structured software in terms of good package design.

	*	To deliver a solution for object persistence. (You get instructor's support for JPA if needed.)

	*	To deliver a solution for the user interface based on Vaadin.

	*	To deliver tested code.

	*	To document your solution.

	[]

	The main difference to the preceding sprints is that you try to estimate your chosen product
backlog items and sprint tasks. Use a relative unit, and then try to calibrate it (e.g., assign
hours) as soon as you'll have finished the first task.


* Your Tasks

	These are the effective task you'll have to provide for this sprint:

	*	Organize your product backlog (PL, as in previous sprints):

			* PL item prioritization

			* PL item grooming

			* PL item "best-guess" estimation (relative sizes)

	*	Organize your sprint:
	
			* Fix the list of PB items for this sprint

			* Split larger PB items into tasks

			* Provide relative estimations for the tasks of this sprint

	*	Perform your smallest task, measure its effort in hours

	*	Calibrate the estimates of the remaining tasks

	*	Update any documents you have so far, if needed

	*	Keep the structure your code in packages by respecting the SOLID design principles

	*	Provide object persistence

	*	Provide code for selected user stories of this sprint:

			* Production Java interfaces and classes

			* JUnit test classes for the application logic and persistence (not necessarily for the user interface)

	*	Provide the documentation of your software

	[]


* Components of this Deliverable

	The deliverable for this sprint shall encompass:

	*	The product backlog at the beginning of the sprint

	*	The sprint backlog items / task list with task estimates
	
	*	The list of finished sprint backlog items / tasks and measurements of your efforts (in hours)

	*	Stable structure in terms of Java packages respecting the SOLID design principles

	*	Production Java interfaces and classes for logical and persistence layer

	*	Production Java interfaces and classes for the user interface layer

	*	JUnit test classes for the core layers of the software, coverage: 90% (UI components excluded)

	*	Run <<<mvn clean package>>> and check the following reports (and act accordingly):

			* The test coverage (JaCoCo) report (90% code coverage of the core layers)

			* The JDepend report (no cycles allowed; respect the Stable Dependency Principle
			  and the Stable Abstractions Principle)

			* The Checkstyle report (no errors allowed)

	*	Run <<<mvn [clean package] jetty:run>>> and play with your application by directing
		your browser to <<<http://localhost:8080>>>

	[]



* Evaluation

	<<100>> points at most per team member are attributed to this deliverable. Points may
not be equally distributed among team members. (However, this is the goal.)



* Deadline

	This deliverable is due: See {{{./sprints.html}Sprint Plan}}.

	[Note:]	Deadline is Friday evening. However, you can provide
			your deliverable till the following Sunday evening, 12 pm.
